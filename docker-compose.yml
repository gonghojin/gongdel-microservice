version: '2.1'

services:
  product:
    build: microservices/product-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
  
  recommendation:
    build: microservices/recommendation-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
  
  review:
    build: microservices/review-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
  
  product-composite:
    build: microservices/product-composite-service
    mem_limit: 350m
    networks:
      - my-network
    ## Removed: port 설정 삭제, Content: 기존 외부 공개 api 를 에지서버로 숨겨서 사용하기 위해 제거(2022.10.04)
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      rabbitmq:
        condition: service_healthy
  
  mongodb:
    image: mongo:3.6.9
    mem_limit: 350m
    networks:
      - my-network
    ports:
      - "27017:27017"
    command: mongod --smallfiles
    healthcheck:
      test: "mongo --eval 'db.stats().ok'"
      interval: 10s
      timeout: 5s
      retries: 10
  
  mysql:
    image: mysql:5.7
    mem_limit: 350m
    ports:
      - "3306:3306"
    networks:
      - my-network
    environment:
      - MYSQL_ROOT_PASSWORD=rootpwd
      - MYSQL_DATABASE=review-db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=pwd
    healthcheck:
      test: "/usr/bin/mysql --user=user --password=pwd --execute \"SHOW DATABASES;\""
      interval: 20s
      timeout: 5s
      retries: 10
  
  rabbitmq:
    image: rabbitmq:3.7.8-management
    mem_limit: 350m
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - my-network
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 10
      
  eureka:
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    build: spring-cloud/eureka-server
    mem_limit: 350m
    ## Removed: port 설정 삭제, Content: 기존 외부 공개 api 를 에지서버로 숨겨서 사용하기 위해 제거
    
  gateway:
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    build: spring-cloud/gateway
    mem_limit: 350m
    ports:
      - "8443:8443"
      
  auth-server:
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    build: spring-cloud/authorization-server
    mem_limit: 350m
    ports:
      - "9999:9999"
    
  config-server:
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,native
      - ENCRYPT_KEY=${CONFIG_SERVER_ENCRYPT_KEY} # 구성 정보를 암호화하고 해독할 떄 사용할 대칭 암호화 키
      - SPRING_SECURITY_USER_NAME=${CONFIG_SERVER_USR}
      - SPRING_SECURITY_USER_PASSWORD=${CONFIG_SERVER_PWD}
    volumes:
    - ${PWD}/config-repo:/config-repo
    build: spring-cloud/config-server
    mem_limit: 350m
    
networks:
  my-network:
    name: my-network
