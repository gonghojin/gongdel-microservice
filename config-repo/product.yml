server.port: 7001
server.error.include-message: always

spring.application.name: product # 유레카 서비스가 마이크로서비스 식별자로 사용

spring.data.mongodb:
  host: localhost
  port: 27017
  database: product-db

spring.cloud.stream:
  defaultBinder: rabbit
  default.contentType: application/json
  bindings.input:
    destination: products
    group: productsGroup # 소비자 그룹 생성_products 인스턴스 중 한 인스턴스로만 product 토픽 게시(중복방지)

spring.cloud.stream.bindings.input.consumer:
  maxAttempts: 3 # 데드 레터 대기열로 이동하기 전에 3회 재시도
  backOffInitialInterval: 500 # 처음 시도 시 500ms
  backOffMaxInterval: 1000
  backOffMultiplier: 2.0

spring.cloud.stream.rabbit.bindings.input.consumer: # 데드레터 대기열
  autoBindDlq: true
  republishToDlq: true

spring.cloud.stream.kafka.bindings.input.consumer:
  enableDlq: true
  
logging:
  level:
    root: INFO
    com.gongdel: DEBUG
    org.springframework.data.mongodb.core.MongoTemplate: DEBUG

management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: "*"

---
spring.profiles: docker

server.port: 8080

app.eureka-server: eureka

spring.data.mongodb.host: mongodb

spring.rabbitmq.host: rabbitmq

spring.cloud.stream.kafka.binder.brokers: kafka

---
spring.profiles: streaming_partitioned # 메시지 브로커에서 파티션을 사용하기 위한 속성 포함
spring.cloud.stream.bindings.input.consumer:
  partitioned: true
  instanceCount: 2

---
spring.profiles: streaming_instance_0
spring.cloud.stream.bindings.input.consumer.instanceIndex: 0 # 첫번째 파티션에서 메시지를 소비

---
spring.profiles: streaming_instance_1
spring.cloud.stream.bindings.input.consumer.instanceIndex: 1 # 두번쨰 파티션에서 소비

---
spring.profiles: kafka # 카프카를 메시징 브로커로 사용하기 위한 속성 포함

management.health.rabbit.enabled: false
spring.cloud.stream.defaultBinder: kafka
