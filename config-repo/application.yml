# 각 클라이언트가 공통으로 사용하는 구성 정보를 구성 저장소로 이동하자
## 액추에이터 엔드포인트, 유레카, rabbitMq, 카프카 접속정보 등
app:
  auth-server: localhost

spring.rabbitmq:
  host: 127.0.0.1
  port: 5672
  
spring.cloud.stream.kafka.binder:
  brokers: 127.0.0.1
  defaultBrokerPort: 9092
  
spring.zipkin.sender.type: rabbit # zipkin 으로 trace 정보를 보낼 떄 rabbitMq 사용
spring.sleuth.sampler.probability: 1.0 # 클라우드 슬루스는 기본 10%의 추적정도만 집킨으로 보내므로, 전체 추적 정보를 보내도록 재설정


## 이러한 구성 설정은 개발 단계에선 유용, 상용 시 과도한 정보 제공은 보안상 문제 있음
##  따라서 actuator 엔트포인트 공개 정보는 최소화 필요
management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: "*"

---
spring.profiles: docker

spring.rabbitmq.host: rabbitmq

spring.cloud.stream.kafka.binder.brokers: kafka

app:
  auth-server: auth-server

---
spring.profiles: kafka

management.health.rabbit.enabled: false
spring.cloud.stream.defaultBinder: kafka
spring.zipkin.sender.type: kafka
spring.kafka.bootstrap-servers: kafka:9092 # 카프카 서버의 위치

---
spring.profiles: prod
spring.rabbitmq.host: 172.17.0.1 # 미니큐브를 사용해 도커 엔진을 생성했을 때의 기본 IP

management.endpoints.web.exposure.include: health,info,circuitbreakerevents # 쿠버네티스의 probe가 사용하는 엔드포인트 및 테스트스크립트에서 사용하는 엔드포인트