api:
  
  common:
    version: 1.0.0
    title: Sample API
    description: Description of the API...
    termsOfServiceUrl: MINE TERMS OF SERVICE URL
    license: License
    licenseUrl: MY LICENSE URL
    
    contact:
      name: Contact
      url: My
      email: me@mail.com
  
  product-composite:
    
    get-composite-product:
      description: Returns a composite view of the specified product id
      notes: |
        # Normal response
        If the requested product id is found the method will return information regarding:
        1. Product information
        1. Reviews
        1. Recommendations
        1. Service Addresses
        (technical information regarding the addresses of the microservices that created the response)
        
        # Expected partial and error responses
        1. If no product information is found, a <b>404 - Not Found</b> error will be returned
        1. In no recommendations or reviews are found for a product, a partial response will be returned
    
    create-composite-product:
      description: Creates a composite product
      notes: |
        # Normal response
        The composite product information posted to the API will be splitted up and stored as separate product-info, recommendation and review entities.
        
        # Expected error responses
        1. If a product with the same productId as specified in the posted information already exists,
           an <b>422 - Unprocessable Entity</b> error with a "duplicate key" error message will be returned
    
    delete-composite-product:
      description: Deletes a product composite
      notes: |
        # Normal response
        Entities for product information, recommendations and reviews related to the specificed productId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
        This means that a delete request of a non existing product will return <b>200 Ok</b>.

server.port: 7000
server.error.include-message: always

spring.cloud.stream:
  defaultBinder: rabbit
  default.contentType: application/json
  bindings:
    output-products: # output 채널
      destination: products # 토픽 이름
      producer:
        required-groups: auditGroup
    output-recommendations:
      destination: recommendations
      producer:
        required-groups: auditGroup
    output-reviews:
      destination: reviews
      producer:
        required-groups: auditGroup
        
spring.security.oauth2.resourceserver.jwt.jwk-set-uri: http://${app.auth-server}/.well-known/jwks.json

app.product-service.timeoutSec: 2

resilience4j.retry: # 재시도 메커니즘은 일시적인 네트워크 결함과 같이 드물게 발생하는 오류에 매우 유용
  backends:
    product:
      maxRetryAttempts: 3 # 첫번쨰 호출을 포함한 총 재시도 횟수
      waitDuration: 1000 # 재시도를 다시 수행하기 전의 대기시간
      retryExceptions: # 재시도를 트리거하는 예외 목록
        - org.springframework.web.reactive.function.client.WebClientResponseException$InternalServerError # 500 상태코드

management.health.circuitbreakers.enabled: true

resilience4j.circuitbreaker:
  backends:
    product:
      registerHealthIndicator: true # 서킷 브레이커 정보를 health 엔드 포인트에 추가할지 여부
      ringBufferSizeInClosedState: 5 # 서킷이 닫혀있을 떄 (정상), 버퍼 사이즈
      failureRateThreshold: 50 # 서킷을  열지 말지 결정하는 실패 threshold 퍼센테이지 / 위의 설정(5) 값 중, 50프로 , 즉 2 개 이상의 호출이 실패하면 서킷이 열리고, 그외는 닫힘
      waitDurationInOpenState: 10000 # half closed 전에 circuit Breaker가 open 되기 전에 기다리는 기간
      ringBufferSizeInHalfOpenState: 3
      automaticTransitionFromOpenToHalfOpenEnabled: true # 대기 시간이 지난 후에, 서킷을 반열림 상태로 자동 전활할지, 첫번째 호출이 들어오길 기다렸다가 반열림 상태로 전환할지를 결정
      ignoreExceptions:
        - com.gongdel.util.exceptions.InvalidInputException
        - com.gongdel.util.exceptions.NotFoundException
        
logging:
  level:
    root: INFO
    se.magnus: DEBUG

---
spring.profiles: docker

server.port: 80

---
spring.profiles: streaming_partitioned

spring.cloud.stream.bindings.output-products.producer:
  partition-key-expression: payload.key
  partition-count: 2

spring.cloud.stream.bindings.output-recommendations.producer:
  partition-key-expression: payload.key
  partition-count: 2

spring.cloud.stream.bindings.output-reviews.producer:
  partition-key-expression: payload.key
  partition-count: 2

---
spring.profiles: kafka

management.health.rabbit.enabled: false
spring.cloud.stream.defaultBinder: kafka
